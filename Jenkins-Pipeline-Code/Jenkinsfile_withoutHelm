pipeline {
    agent any 
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment  {
        DB_USERNAME = credentials('RDS_USERNAME')
        DB_PASSWORD = credentials('RDS_PASSWORD')
        DB_URL = "jdbc:mysql://${credentials('RDS_ENDPOINT')}:3306/book-rds"
        REPOSITORY_URI_BACKEND = credentials('ECR_URI_BACKEND')
        REPOSITORY_URI_FRONTEND = credentials('ECR_URI_FRONTEND')
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME_BACKEND = credentials('ECR_REPO_BACKEND')
        AWS_ECR_REPO_NAME_FRONTEND = credentials('ECR_REPO_FRONTEND')
        AWS_DEFAULT_REGION = 'us-east-1'
        EKS_CLUSTER = 'project-eks'
        HELM_RELEASE = 'my-app'
        HELM_CHART_PATH = './helm-chart'
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'master', url: 'http://github.com/shivanismalwadkar/AWSHelm.git'
            }
        }

        stage("Docker Image Build") {
            steps {
                script {
                    dir('backend') {
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                        sh 'docker build -t ${AWS_ECR_REPO_NAME_BACKEND} .'
                    }
                    dir('client') {
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                        sh 'docker build -t ${AWS_ECR_REPO_NAME_FRONTEND} .'
                    }
                }
            }
        }

        stage("ECR Image Pushing") {
            steps {
                script {
                    sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI_BACKEND}'
                    sh 'docker tag ${AWS_ECR_REPO_NAME_BACKEND} ${REPOSITORY_URI_BACKEND}:${BUILD_NUMBER}'
                    sh 'docker push ${REPOSITORY_URI_BACKEND}:${BUILD_NUMBER}'

                    sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI_FRONTEND}'
                    sh 'docker tag ${AWS_ECR_REPO_NAME_FRONTEND} ${REPOSITORY_URI_FRONTEND}:${BUILD_NUMBER}'
                    sh 'docker push ${REPOSITORY_URI_FRONTEND}:${BUILD_NUMBER}'
                }
            }
        }

        /*stage('Update Helm Values') {
            steps {
                dir('helm-chart') {
                    sh '''
                    sed -i "s|tag:.*|tag: ${BUILD_NUMBER}|g" values.yaml
                    sed -i "s|value:.*DATABASE_URL.*|value: \\"jdbc:mysql://${DB_URL}:3306/book-rds\\"|g" values.yaml
                    sed -i "s|value:.*DATABASE_USERNAME.*|value: \\"${DB_USERNAME}\\"|g" values.yaml
                    sed -i "s|value:.*DATABASE_PASSWORD.*|value: \\"${DB_PASSWORD}\\"|g" values.yaml
                    '''
                }
            }
        }*/

        stage('Deploy to EKS') {
            steps {
                dir('kubernetes-files') {
                    sh '''
                    sed -i "s#image:.*#image: ${REPOSITORY_URI_BACKEND}:${BUILD_NUMBER}#g" backend-deployment.yaml
                    sed -i "s#image:.*#image: ${REPOSITORY_URI_FRONTEND}:${BUILD_NUMBER}#g" frontend-deploy-service.yaml
                    sed -i "s#__TAG__#${BUILD_NUMBER}#g" backend-deployment.yaml
                    sed -i "s#__TAG__#${BUILD_NUMBER}#g" frontend-deploy-service.yaml

                    git add .
                    git commit -m "Update deployment Image to version ${BUILD_NUMBER}"
                    git push origin master

                    aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name ${EKS_CLUSTER}
                    kubectl apply -f backend-deployment.yaml
                    kubectl apply -f frontend-deploy-service.yaml
                    '''
                }
            }
        }
    }
}
